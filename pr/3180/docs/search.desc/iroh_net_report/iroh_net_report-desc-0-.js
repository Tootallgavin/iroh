searchState.loadedDescShard("iroh_net_report", 0, "Checks the network conditions from the current host.\nSender to the main service.\nClient to run net_reports.\nA map fake Ipv6 address with an actual IP address.\nCan occur when converting a <code>SocketAddr</code> to an <code>IpMappedAddr</code>\nA Map of <code>IpMappedAddresses</code> to <code>SocketAddr</code>.\nThe dummy port used for all mapped addresses\nEnum of metrics for the module\nOptions for running probes\nPieces needed to do QUIC address discovery.\nLatencies per relay node.\nA net_report report.\nReturns a new address to send messages to this actor.\nAttempts to bind a local socket to send STUN packets from.\nCaptivePortal is set when we think there’s a captive …\nA client config.\nCreate an <code>Options</code> that disables all probes\nA QUIC Endpoint\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a globally unique fake UDP address.\nReturns the <code>SocketAddr</code> for the given <code>IpMappedAddr</code>.\nReturns the <code>IpMappedAddr</code> for the given <code>SocketAddr</code>.\nAdds a <code>SocketAddr</code> to the map and returns the generated …\nRuns a net_report, returning the report.\nGet report with channel\nRuns a net_report, returning the report.\nip:port of global IPv4\n<code>[ip]:port</code> of global IPv6\nWhether the router supports communicating between two …\nEnable or disable https probe\nEnable or disable icmp_v4 probe\nEnable or disable icmp_v6 probe\nAn ICMPv4 round trip completed, <code>None</code> if not checked.\nAn ICMPv6 round trip completed, <code>None</code> if not checked.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnable ipv4 QUIC address discovery probes\nAn IPv4 STUN round trip completed.\nan IPv4 packet was able to be sent\nEnable ipv6 QUIC address discovery probes\nAn IPv6 STUN round trip completed.\nAn IPv6 packet was able to be sent\nReturns an iterator over all the relays and their …\nWhether STUN results depend on which STUN server you’re …\nWhether STUN results depend on which STUN server you’re …\nCreates an empty <code>IpMappedAddresses</code>.\nCreates a new net_report client.\nTest if IPv6 works at all, or if it’s been hard disabled …\ncould bind a socket to ::1\nProbe indicating the presence of port mapping protocols on …\n<code>None</code> for unknown\nEnable quic probes\nPass a received STUN packet to the net_reporter.\nkeyed by relay Url\nkeyed by relay Url\nkeyed by relay Url\nReturn a <code>SocketAddr</code> from the <code>IpMappedAddr</code>.\nSet the ipv4 stun socket and enable ipv4 stun probes\nSet the ipv6 stun socket and enable ipv6 stun probes\nA UDP STUN round trip completed.")